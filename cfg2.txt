S -> BLOCK

BLOCK -> EXPR
BLOCK -> BLOCK EXPR
BLOCK -> { BLOCK }

EXPR -> OP LT
EXPR -> B_IF
EXPR -> B_FOR
EXPR -> B_SWITCH
EXPR -> B_TRY
EXPR -> B_FUNCTION
EXPR -> B_THROW
EXPR -> B_RETURN
EXPR -> B_DECLARE

B_IF -> IF ( OP ) { BLOCK }
B_IF -> B_IF B_IFBRANCH
B_IFBRANCH -> ELSEIF ( OP ) { BLOCK }
B_IFBRANCH -> B_IFBRANCH B_IFBRANCH
B_IFBRANCH -> B_IFBRANCH B_IFBRANCHLAST
B_IFBRANCH -> B_IFBRANCHLAST
B_IFBRANCHLAST -> ELSE { BLOCK }
B_FOR -> FOR ( DECL_KEY ID IN OP ) { BLOCK }
B_FOR -> FOR ( DECL_KEY ID OF OP ) { BLOCK }
B_SWITCH -> SWITCH ( OP ) { B_CASE }
B_CASE -> CASE VAL : BLOCK
B_CASE -> DEFAULT : BLOCK
B_CASE -> B_CASE B_CASE
B_TRY -> TRY { BLOCK } B_CATCH
B_TRY -> TRY { BLOCK } B_FINALLY
B_TRY -> TRY { BLOCK } B_CATCH B_FINALLY
B_CATCH -> CATCH ( ID ) { BLOCK }
B_CATCH -> B_CATCH B_CATCH
B_FINALLY -> FINALLY { BLOCK }
B_FUNCTION -> FUNCTION ID ( COMMALIST_ID ) { BLOCK }
B_THROW -> THROW OP LT
B_RETURN -> RETURN LT
B_RETURN -> RETURNVAL OP LT
B_DECLARE -> DECL_KEY ID LT
B_DECLARE -> DECL_KEY ASSIGNMENT LT

# Keywords and operators
IF -> 'IF'
ELSEIF -> 'ELSEIF'
ELSE -> 'ELSE'
FOR -> 'FOR'
WHILE -> 'WHILE'
BREAK -> 'BREAK'
CONTINUE -> 'CONTINUE'
IN -> 'IN'
OF -> 'OF'
SWITCH -> 'SWITCH'
CASE -> 'CASE'
DEFAULT -> 'DEFAULT'
TRY -> 'TRY'
CATCH -> 'CATCH'
FINALLY -> 'CATCH'
FUNCTION -> 'FUNCTION'
RETURN -> 'RETURN'
RETURNVAL -> 'RETURNVAL'
THROW -> 'THROW'
VAR -> 'VAR'
LET -> 'LET'
CONST -> 'CONST'
ID -> 'ID'
NUM -> 'NUM'
STR -> 'STR'
( -> '('
( -> LT (
( -> ( LT
) -> ')'
) -> LT )
) -> ) LT
{ -> '{'
{ -> LT {
{ -> { LT
} -> '}'
} -> LT }
} -> } LT
[ -> '['
[ -> LT [
[ -> [ LT
] -> ']'
] -> LT ]
] -> ] LT
? -> '?'
? -> LT ?
? -> ? LT
: -> ':'
: -> LT :
: -> : LT
. -> '.'
. -> LT .
. -> . LT
, -> ','
, -> LT ,
, -> , LT
LT -> 'LT'
ASSIGN_OP -> 'ASSIGN_OP'
UN_OP_PRE -> 'UN_OP_PRE'
UN_OP_POS -> 'UN_OP_POS'
BIN_OP -> 'BIN_OP'

VAL -> ID
VAL -> NUM
VAL -> STR
VAL -> FUNC_CALL

DECL_KEY -> VAR
DECL_KEY -> LET
DECL_KEY -> CONST

OP -> VAL
OP -> ( OP )
OP -> OP BIN_OP OP
OP -> UN_OP_PRE OP
OP -> OP UN_OP_POS
OP -> ASSIGNMENT

ASSIGNMENT -> ID ASSIGN_OP OP

COMMALIST_ID -> ID
COMMALIST_ID -> ID , COMMALIST_ID
COMMALIST_OP -> OP
COMMALIST_OP -> OP , COMMALIST_OP

FUNC_CALL -> ID ( COMMALIST_OP )
FUNC_CALL -> ID ( )